#!/usr/bin/perl -w
######################################################################
#
# Edwin Huffstutler, <edwinh@computer.org>
# $Id$
# $Name$
#
#         >>>> See the README file <<<<
#
# USAGE:
#
#  flexbackup -help                : this message
#
#  flexbackup -fs all              : backup all filesystems, level 0
#  flexbackup -fs <x>              : backup filesystem <x>, level 0
#  flexbackup -fs all -level <n>   : backup all filesystems, level n
#  flexbackup -fs <x> -level <n>   : backup filesystem <x>, level n
#
#  flexbackup -list                : list files in archive at current
#                                    tape position
#
#  flexbackup -extract             : restore from current tape position
#                                    into your current working directory
#
#  flexbackup -restore             : as above, but interactive restore
#                                    (dump type only for now)
#
#  flexbackup -compare             : compare archive at current tape position
#                                    with the files in your current directory
#
#  flexbackup -toc                 : list tape table of contents
#                                    with Linux ftape only
#
#  flexbackup [opt] -c <file>      : use <file> instead of /etc/flexbackup.conf
#                                    for configuration
#
#  flexbackup [opt] -type <x>      : override $type from config file
#
#  flexbackup -fs <x> -erase       : force a rewind/erase before backup
#  flexbackup -fs <x> -noreten     : don't retension for level 0 "all" backups
#
######################################################################

use Getopt::Long;
use English;
use strict;
use diagnostics;

# No output buffering
$OUTPUT_AUTOFLUSH = 1;

# There are only referenced once; this makes warnings go away
package cfg;
use vars qw($dump_length $afio_buffer);

package global;

%global::opt = ();
if (! &main::GetOptions(\%global::opt,
		  "help",
		  "c=s",
		  "level=i",
		  "fs=s",
                  "extract",
                  "restore",
                  "list",
                  "compare",
                  "toc",
                  "type=s",
                  "noreten",
                  "erase"
		  )) {
    &usage();
    exit(0);
}

# Give usage message
if (defined($global::opt{'help'})) {
    &usage();
    exit(0);
}

# Get/read config file
&readconfigfile();

# Sanity check things
&optioncheck();

# Get date string
chomp($global::date=`date +%Y%m%d`);

# Set blocksize
$_ = $cfg::blksize * 1024;
system("$global::mt -f $cfg::device setblk $_");
if ($?) {
    die("Error from $global::mt setblk $_, exiting...\n");
}


if (defined($global::opt{'restore'})) {
    &restore_routine();

} elsif (defined($global::opt{'extract'})) {
    &extract_routine();

} elsif (defined($global::opt{'compare'})) {
    &compare_routine();

} elsif (defined($global::opt{'list'})) {
    &list_routine();

} elsif (defined($global::opt{'fs'})) {
    &backup_routine();

} elsif (defined($global::opt{'toc'})) {

    if ($cfg::ftape eq 'true') {
	system("$global::mt -f $cfg::device rewind");
	exec("vtblc -p -f $cfg::rawdevice");
	die("Failed exec of vtblc\n");
    } else {
	die("-toc only implemented for ftape under Linux\n");
    }

} else {
    print "Nothing to do!\n";

}

exit(0);

######################################################################
# Backup
######################################################################
sub backup_routine {

    my @files;

    # Get backup level...
    if (defined($global::opt{'level'})) {
        $global::level = $global::opt{'level'};
    } else {
        $global::level = 0;
    }

    # Die if no fs specified
    if (!defined($global::opt{'fs'})) {
        &usage();
        exit(0);
    }

    &log('$Id$ ');
    &log('$Name$ ');
    &log("Doing level $global::level backup of $global::opt{fs} using $cfg::type");

    # Figure out log file name & empty log file
    my $label = &get_label($global::opt{'fs'});
    $global::log = "$cfg::logdir/$cfg::prefix$label.$global::level.$global::date";
    if (! open(LOG,">$global::log")) {
        die "Can't write to $global::log: $!\n";
    }
    close(LOG);

    # Remove old incremental log files
    # ("old" = any higher-numbered logs for this label)
    opendir(DIR,"$cfg::logdir") or die("Can't open cfg::logdir: $!\n");
    @files = readdir(DIR);
    foreach (reverse sort @files) {
        next if (! m/^$cfg::prefix$label\.([0-9])\.([0-9]+)$/);
        my $olddate = $2;
        if ($1 > $global::level) {
            print "Removing old level $1 log of $global::opt{fs} ($olddate)\n";
            unlink("$cfg::logdir/$_") or warn("Can't remove $_: $!\n");
        }
    }
    close(DIR);

    # Remove old incremental stamp files
    # ("old" = any higher-numbered logs for this label)
    opendir(DIR,"$cfg::stampdir") or die("Can't open $cfg::stampdir: $!\n");
    @files = readdir(DIR);
    foreach (reverse sort @files) {
        next if (! m/^$cfg::sprefix\.$label\.([0-9])$/);
        if ($1 > $global::level) {
            print "Removing old level $1 timestamp of $global::opt{fs}\n";
            unlink("$cfg::stampdir/$_") or warn("Can't remove $_: $!\n");
        }
    }
    close(DIR);


    ##########################
    #
    # Main backup routine
    #
    ##########################
    &line();

    if ($global::opt{'fs'} eq 'all') {

        &log("(all = $cfg::filesystems)");

        # All filesystems
        if ($global::level eq "0") {

            # All
            # Level zero - rewind and erase a new tape
            if (!defined($global::opt{'noreten'})) {
                &log('Retensioning tape...');
                &mt('retension');
            }
            &log('Erasing tape...');
            &mt('erase');
            $global::nextfile = 0;

        } else {

            # All
            # Incremental backup - list what's on it, then go to end of tape
            if (!defined($global::opt{'erase'})) {
                $global::nextfile = &contents();
                &log('Making sure tape is at end of data...');
                &mt('endofdata');
            } else {
                $global::nextfile = 0;
                &log('Rewinding & erasing tape...');
                &mt('rewind');
                &mt('erase');
            }
        }

        # Show tape position
        &line();
        &mt('query');

        # Iterate over the filesystems and back 'em up
        foreach (split(/\s+/,$cfg::filesystems)) {
            &backup($cfg::type,$_);
            $global::contents{$global::nextfile} = "$cfg::type $_ ($global::level)";
            $global::nextfile++;
        }

        # Rewind
        &line();
        &log("Rewinding...\n");
        &mt('rewind');

        # Only ftape has the toc capability
        if ($cfg::ftape eq 'true') {
            &log('Updating table of contents...');
            foreach (keys %global::contents) {
                &tag($_,$global::contents{$_});
            }
        }

    } else {

        # Just one filesystem
        if (!defined($global::opt{'erase'})) {
            $global::nextfile = &contents();
            &log('Making sure tape is at end of data...');
            &mt('endofdata');
        } else {
            $global::nextfile = 0;
            &log('Rewinding & erasing tape...');
            &mt('rewind');
            &mt('erase');
        }
        &line();
        &mt('query');
        &backup($cfg::type,$global::opt{'fs'});
        &line();
        &log("Rewinding...");
        &mt('rewind');
        if ($cfg::ftape eq 'true') {
            &log('Updating table of contents...');
            &tag($global::nextfile,"$cfg::type $global::opt{'fs'} ($global::level)");
        }
    }

    # Print out new contents
    &contents();

    exit(0);
}

######################################################################
# Rewind & print TOC using vtblc
# returns an integer that is the next file number
######################################################################
sub contents {
    my($output,$filenumber);

    if ($cfg::ftape eq "true") {
        &mt('rewind');
        &log('');
        $output=`vtblc -p -f $cfg::rawdevice 2>&1`;
        &log($output);
        &log('');
        $filenumber = -1;
        foreach (split("\n",$output)) {
            # Nr  Id          Label
            #-------------------------------
            #  0 VTBL "/var (level 9)
            next if m/^\s+Nr\s+/;
            next if m/^----------/;
            if (m/^\s+(\d+)\s+\S+\s+\"/) {
                $filenumber = $1;
            }
        }

    } else {

        $filenumber = 0;
    }

    $filenumber++;
    return($filenumber);
}

######################################################################
# Modify a table of contents entry
######################################################################
sub tag {
    my($filenum,$title) = @_;
    system("vtblc -f $cfg::rawdevice -# $filenum -m date -m label=\'$title\'");
}

######################################################################
# Backup a filesystem
######################################################################
sub backup {

    my($type,$dir) = @_;
    my($string,$tapehost,$remote);

    my $localdir = $dir;
    if ($localdir =~ s/^(.+):(.+)$/$2/) {
	$remote = $1;
	chomp($tapehost = `hostname`);
    } else {
        $remote = '';
    }

    my $label = &get_label($dir);

    if ($type eq 'dump') {
	$string = &backup_dump($label,$localdir,$remote,$tapehost);
    } elsif ($type eq 'afio') {
	$string = &backup_afio($label,$localdir,$remote,$tapehost);
    } elsif ($type eq 'tar') {
	$string = &backup_tar($label,$localdir,$remote,$tapehost);
    } elsif ($type eq 'cpio') {
	$string = &backup_cpio($label,$localdir,$remote,$tapehost);
    }

    &line();
    my $stamp = &get_label($dir);
    &log("Timestamp $cfg::stampdir/$cfg::sprefix.$stamp.$global::level");
    system("touch $cfg::stampdir/$cfg::sprefix.$stamp.$global::level");

    &line();
    &log("Running \"$string\"");

    # If we started with level 0 and all, we know the file number,
    # since we erased the tape
    # (or if using ftape/vtblc, since we can find the file number)
    # (or if we had -erase on the commandline)
    if ((($global::opt{'fs'} eq "all") and ($global::level eq "0"))
        or
        ($cfg::ftape eq "true")
        or
        ($global::opt{'erase'})) {
        &log("Backup will be file number $global::nextfile");
    }

    # Enough fooling around... run it
    &line();
    system("$string 2>&1 | tee -a $global::log");
    if ($?) {
	&log("Error from $type backup, exiting....\n");
	exit(1);
    }

    # tar is causing me fits...  mt right after archive operations is giving i/o errors
    if ($type eq 'tar') {
        sleep 5;
    }

    # Show where we are on the tape
    &line();
    &mt('query');
}


######################################################################
# Return command to backup a filesystem using dump
######################################################################
sub backup_dump {
    my($label,$dir,$remote,$tapehost) = @_;
    my $string = '';

    if ($remote) {
        $string .= "$cfg::remoteshell $remote \"r";
    }

    $string .= "dump $global::level" . "uBbf $cfg::dump_length $cfg::blksize";

    if ($remote) {
        $string .= " $tapehost:$cfg::device $dir\"";
    } else {
        $string .= " $cfg::device $dir";
    }

    return($string);
}


######################################################################
# Return command to backup a filesystem using afio
######################################################################
sub backup_afio {
    my($label,$dir,$remote,$tapehost) = @_;
    my $string = '';
    my $tmpstamp;

    if ($remote) {
	$string  .= "$cfg::remoteshell $remote -n \"";
    }

    if ($global::level ne "0") {
        $tmpstamp = "/tmp/refdate.$label";
        $_ = &get_last_date($label,$global::level);
        $string .= "touch -d \"$_\" $tmpstamp && ";
    }

    $string .= "cd $dir && find . -xdev";

    if ($global::level ne "0") {
         $string .= " -newer $tmpstamp";
    }

    $string .= " -print | afio -o $cfg::afio_compress $cfg::afio_verbose -b $cfg::afio_blksize -c $cfg::afio_buffer";

    if ($remote) {
        $string .= " -B $tapehost%$cfg::remoteshell:$cfg::device";
    } else {
        $string .= " -B $cfg::device";
    }

    if ($global::level ne "0") {
        $string .= " && rm -f $tmpstamp";
    }

    if ($remote) {
        $string .= "\"";
    }

    return($string);
}

######################################################################
# Return command to backup a filesystem using cpio
######################################################################
sub backup_cpio {
    my($label,$dir,$remote,$tapehost) = @_;
    my $string = '';
    my $tmpstamp;

    if ($remote) {
        $string .= "$cfg::remoteshell $remote -n \"";
    }

    if ($global::level ne "0") {
        $tmpstamp = "/tmp/refdate.$label";
        $_ = &get_last_date($label,$global::level);
        $string .= "touch -d \"$_\" $tmpstamp && ";
    }

    $string .= "cd $dir && find . -xdev";

    if ($global::level ne "0") {
         $string .= " -newer $tmpstamp";
    }

    $string .= " -print | cpio -o $cfg::cpio_verbose -H $cfg::cpio_format -C $cfg::cpio_blksize";

    if ($remote) {
        $string .= " -F $tapehost:$cfg::device";
    } else {
        $string .= " -F $cfg::device";
    }

    if ($global::level ne "0") {
        $string .= " && rm -f $tmpstamp";
    }

    if ($remote) {
        $string .= "\"";
    }

    return($string);
}

######################################################################
# Return command to backup a filesystem using tar
######################################################################
sub backup_tar {
    my($label,$dir,$remote,$tapehost) = @_;
    my $string = '';

    if ($remote) {
        $string  .= "$cfg::remoteshell $remote \"";
    }


    $string .= "tar -C $dir -c $cfg::tar_compress $cfg::tar_verbose -b $cfg::tar_blksize -l";

    if ($global::level ne "0") {
        # With this one we don't have to put a stampfile on the remote system
        # since we only need the date string
        $_ = &get_last_date($label,$global::level);
        $string .= " -N \'$_\'";
    }

    if ($remote) {
        $string .= " --rsh-command $cfg::remoteshell -f $tapehost:$cfg::device .\"";
    } else {
        $string .= " -f $cfg::device .";
    }

    return($string);
}

######################################################################
# List the files in an archive
######################################################################
sub list_routine {

    if ($cfg::type eq 'dump') {
        &mt('query');
        &line();
	system("restore -t -b $cfg::blksize -f $cfg::device");
        &line();
        &mt('query');
        exit;

    } elsif ($cfg::type eq 'afio') {
        &mt('query');
        &line();
        system("afio -t $cfg::afio_verbose -b $cfg::afio_blksize -B $cfg::device");
        &line();
        &mt('query');
        exit;

    } elsif ($cfg::type eq 'tar') {
        &mt('query');
        &line();
        system("tar -t $cfg::tar_verbose $cfg::tar_compress -b $cfg::tar_blksize -f $cfg::device");
        &line();
        &mt('query');
        exit;

    } elsif ($cfg::type eq 'cpio') {
        &mt('query');
        &line();
        system("cpio -t $cfg::cpio_verbose -H $cfg::cpio_format -C $cfg::cpio_blksize -F $cfg::device");
        &line();
        &mt('query');
        exit;

    }
}

######################################################################
# Extract an archive to current directory
######################################################################
sub extract_routine {

    if ($cfg::type eq 'dump') {
        &mt('query');
        &line();
	system("restore -r -v -b $cfg::blksize -f $cfg::device");
        &line();
        &mt('query');
	exit;

    } elsif ($cfg::type eq 'afio') {
        &mt('query');
        &line();
        system("afio -i -x $cfg::afio_compress $cfg::afio_verbose -b $cfg::afio_blksize -B $cfg::device");
        &line();
        &mt('query');
        exit;

    } elsif ($cfg::type eq 'tar') {
        &mt('query');
        &line();
        system("tar -x -p $cfg::tar_compress $cfg::tar_verbose -b $cfg::tar_blksize -f $cfg::device");
        &line();
        &mt('query');
        exit;

    } elsif ($cfg::type eq 'cpio') {
        &mt('query');
        &line();
        system("cpio -i -m -d $cfg::cpio_verbose -H $cfg::cpio_format -C $cfg::cpio_blksize -F $cfg::device");
        &line();
        &mt('query');
        exit;

    }
}

######################################################################
# Compare an archive to current directory
######################################################################
sub compare_routine {

    &line();

    if ($cfg::type eq 'dump') {
        &mt('query');
        &line();
	system("restore -C -b $cfg::blksize -f $cfg::device");
        &line();
        &mt('query');
	exit;

    } elsif ($cfg::type eq 'afio') {
        &mt('query');
        &line();
        system("afio -r $cfg::afio_compress -b $cfg::afio_blksize -B $cfg::device");
        &line();
        &mt('query');
	exit;

    } elsif ($cfg::type eq 'tar') {
        &mt('query');
        &line();
        system("tar -d $cfg::tar_compress -b $cfg::tar_blksize -f $cfg::device");
        &line();
        &mt('query');
	exit;

    } elsif ($cfg::type eq 'cpio') {
        die("cpio not capable of comparing files\n");

    }
}

######################################################################
# Interactive restore
######################################################################
sub restore_routine {

    if ($cfg::type eq 'dump') {
        &mt('query');
        &line();
	system("restore -i -v -b $cfg::blksize -f $cfg::device");
        &line();
        &mt('query');
	exit;

    } else {
        die("Interactive restore for $cfg::type not done yet\n");
    }
}

######################################################################
# Return the "label" name of the filesystem/dir
######################################################################
sub get_label {

    my($label) = shift(@_);

    $label =~ s:^/::;
    $label =~ s:/:-:g;
    if ($label eq '') {
        $label = 'root';
    } elsif ($label =~ m/^(.+):-$/) {
        $label = "$1:root";
    }

    return($label);

}

######################################################################
# Return a date string of the timestamp file
# from the last dump of this level or lower
######################################################################
sub get_last_date {

    my($label,$level) = @_;
    my $file;
    my $targetfile = '';

    opendir(DIR,"$cfg::stampdir") or die("Can't open $cfg::stampdir: $!\n");
    my @files = readdir(DIR);
    foreach $file (reverse sort @files) {
        next if ($file !~ m/^$cfg::sprefix\.$label\.([0-9])$/);
        if ($1 <= $global::level) {
            $targetfile = "$cfg::stampdir/$file";
            last;
        }
    }
    close(DIR);

    if ($targetfile ne '') {
        chomp($_ = `date -r $targetfile`);
        return($_);

    }

    return('');

}

######################################################################
# Echo message to screen and log
######################################################################
sub log {
    my($msg) = @_;
    print "$msg\n";
    if (defined($global::log)) {
        open(LOG,">>$global::log");
        print LOG "$msg\n";
        close(LOG);
    }
}

######################################################################
# Echo a line to both screen and log
######################################################################
sub line {
    print "----------------------------------------\n";
    if (defined($global::log)) {
        open(LOG,">>$global::log");
        print LOG "----------------------------------------\n";
        close(LOG);
    }
}

######################################################################
# Read configuration file
######################################################################
sub readconfigfile {

    my $configfile;

    if (defined($global::opt{'c'})) {
        $configfile = $global::opt{'c'};
    } else {
        $configfile = "/etc/flexbackup.conf";
    }
    if (! -r $configfile) {
        die("config file $configfile: $!");
    }
    system("perl -c $configfile 2>&1");
    if ($?) {
        die("syntax error in config file $configfile");
    }
    require "$configfile";

}

######################################################################
# Do a tape operation
######################################################################
sub mt {
    my($operation) = @_;

    if ($operation eq 'query') {
        if ($cfg::ftape eq 'true') {
            $operation = 'getsize';
        } else {
            $operation = 'status';
        }
    }

    if ($operation eq 'endofdata') {
        if ($cfg::ftape eq 'true') {
            $operation = 'eom';
        } else {
            $operation = 'eod';
        }
    }

    if (defined($global::log)) {
        system("$global::mt -f $cfg::device $operation 2>&1 | tee -a $global::log");
    } else {
        system("$global::mt -f $cfg::device $operation 2>&1");
    }
    if ($?) {
	&log("Error from $global::mt $operation, exiting....\n");
        exit(1);
    }
}

######################################################################
# Option error checking
######################################################################
sub optioncheck {

    # ftape support
    if (defined($cfg::ftape)) {
	if ($cfg::ftape eq 'true') {
	    $global::mt = 'ftmt';
	} elsif ($cfg::ftape eq 'false') {
	    $global::mt = 'mt';
	} else {
	    die("\$ftape must be defined as true or false\n");
	}
    } else {
	die("\$ftape must be defined as true or false\n");
    }

    # log/stamp files
    if (defined($cfg::logdir)) {
	if (! -d $cfg::logdir) {
            mkdir("$cfg::logdir",0755) or die("Can't mkdir $cfg::logdir: $!");
	}
    } else {
	die("\$logdir must be defined\n");
    }
    if (defined($cfg::stampdir)) {
        if (! -d $cfg::stampdir) {
            mkdir("$cfg::stampdir",0755) or die("Can't mkdir $cfg::stampdir: $!");
        }
    } else {
        die("\$stampdir must be defined\n");
    }

    # archive type
    if (defined($global::opt{'type'})) {
        $cfg::type = $global::opt{'type'};
    }

    # Type-specific setup
    if (defined($cfg::type)) {

	if ($cfg::type eq 'afio') {

            # Compress flag
            if ($cfg::afio_compress eq "true") {
                $cfg::afio_compress = "-Z";
            } else {
                $cfg::afio_compress = "";
            }

            # Verbose flag
            if ($cfg::afio_verbose eq "true") {
                $cfg::afio_verbose = "-v -z";
            } else {
                $cfg::afio_verbose = "";
            }

            # For afio, blocksize needs k appended
            $cfg::afio_blksize = $cfg::blksize . "k";

	} elsif ($cfg::type eq 'dump') {

	} elsif ($cfg::type eq 'tar') {

            # Compress flag
            if ($cfg::tar_compress eq "true") {
                $cfg::tar_compress = "-z";
            } else {
                $cfg::tar_compress = "";
            }

            # Verbose flag
            if ($cfg::tar_verbose eq "true") {
                $cfg::tar_verbose = "-v --totals";
            } else {
                $cfg::tar_verbose = "";
            }

            # For tar, blocks are in 512-byte units
            # not 1024 (1k) like dump, afio
            $cfg::tar_blksize = $cfg::blksize * 2;

	} elsif ($cfg::type eq 'cpio') {

            # Verbose flag
            if ($cfg::cpio_verbose eq "true") {
                $cfg::cpio_verbose = "-v";
            } else {
                $cfg::cpio_verbose = "";
            }

            # For cpio, blocks are in bytes
            # not 1024 (1k) like dump, afio
            $cfg::cpio_blksize = $cfg::blksize * 1024;

	} else {
	    die("\$type must be defined as afio, dump, tar, or cpio\n");
	}
    } else {
	die("\$type must be defined as afio, dump, tar, or cpio\n");
    }

    # levels
    if (defined($global::opt{'level'})) {
        if ($global::opt{'level'} !~ m/^\d$/) {
            die("-level must be 0 through 9 only\n");
        }
    }

}

######################################################################
# Print usage summary from the header
######################################################################
sub usage {
    open(FILE,"$0") or die "Can't open $0: $!\n";
    while(<FILE>) {
	last if (m/^\#\s+USAGE:/);
    }
    while(<FILE>) {
	last if (m/^\#\#\#\#\#\#\#/);
	s/^\#//;
	print;
    }
    close(FILE);
}
