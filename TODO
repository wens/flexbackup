$Id$
$Name$

Flexbackup to-do list
Some of these might not happen, but figured I should jot them down

alternate paths to commands
  modify checkinpath
  modify all places that use the commands

when using files
  act like tapes!
  make higher numbered level nuke lower ones & rm index
  make index not have numbers, but filenames.
  make -num give ignored message

finish & test multibuf support
  how does multibuf interact with indexes???
  makefile rpm etc.
  compiles on other systems?

Features to add:
 - differential mode (all since previous higher level)
     interaction w/ logs
     interaction w/ files
 - "no blocking at all" option
 - move CVS to sourceforge
 - make a manual page!  too many options now :)
 - interactive restore-like shell for types besides dump
      see notes below
 - arbitratry "groups" that act sort of like "all"
 - multiple tapes for levels that aren't 0
 - Gnome driver/configurator utility
      I have a "picture" of what I want this to look like
      use glade + libglade
      will be a separate program that just manipulates flexbackup
 - extract options to not overwrite existing files
 - remote extract/compare/restore
      just install s/w on client w/remote tape device. need config file
      option
 - encryption with gnupg
 - cd-rom burning (or just .iso type?) for full backups?
 - some "level" that uses rpm, verifies all packages, and just backs
      up any file not in a package OR changed from a package. and the rpm list.
 - once the above works make it work for debian packages
 - add switch to remove all index entries for all tapes


Cleanup/fix:
 - zip/unzip backend, use fifos rather than temp files
 - do a debian package
 - make -extract -files for afio/cpio/zip recurse dirs
      dump/tar already to this.
 - try restore -D for comparing subdirs w/ restore
 - check that dir we are backing up exists
 - config file in just text?  Wondering if anyone is bothered by the
      perl syntax.


-------------------

Notes for cloning restore shell for afio/tar/cpio types)
Use perl readline module
(Maybe a seperate program or module that runs off a list fed to it)

1) do a listing
2) parse & put into data structures
3) mt bsf 1
4) then give a shell w/ all commands from regular dump
5) mark things for extraction
6) reopen archive & extract that list

Help from restore to jog my brain...

        ls [arg] - list directory
        cd arg - change directory
        pwd - print current directory
        add [arg] - add `arg' to list of files to be extracted
        delete [arg] - delete `arg' from list of files to be extracted
        extract - extract requested files
        setmodes - set modes of requested directories
        quit - immediately exit program
        what - list dump header information
        verbose - toggle verbose flag (useful with ``ls'')
        help or `?' - print this list
If no `arg' is supplied, the current directory is used


Local Variables:
mode: flyspell
end:
