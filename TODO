$Id$
$Name$

Flexbackup to-do list
Some of these might not happen, but figured I should jot them down


Features to add:
 - multiple tapes for level that aren't 0
 - interactive restore-like shell for types besides dump
     see notes below
 - support multiple tapes for a single archive
     - dump already does this? afio has hooks too. tar does(-M). would
       the pipeline mechanism screw it all up?
     - found a utility called "multivol", and one from Kbackup celled
       "multibuf" that could replace buffer and handle volumes too.
        must play with them both.
     - need to test with an almost-full tape, or a floppy
 - configurable path for programs (gtar=tar, etc)
     remote vs local too
 - Gnome driver/configurator utility
     I have a "picture" of what I want this to look like
     use glade + libglade
     will be a seperate program that just manipulates flexbackup
 - make a manual page
     embed in script, use pod2man
 - extract options to not overwrite existing files
 - remote extract/compare/restore
     just install s/w on client w/remote tape device. need config file
     option
 - encryption with gnupg
 - cd-rom burning (or just .iso type?) for full backups?
 - some "level" that uses rpm, verifies all packages, and just backs
   up any file not in a package OR changed from a package. and the rpm list.
 - once the above works make it work for debian packages


Cleanup/fix:
 - zip/unzip backend, use fifos rather than temp files
 - indexes and using files can soemtimes mess up if the filenames
   clobber each other.  use full time?
 - when using files, maybe I want "erase" to clean out a dir?
 - do a debian package
 - make -extract -files for afio/cpio/zip recurse dirs
      dump/tar already to this.
 - try restore -D for comparing subdirs w/ restore
 - check that dir we are backing up exists
 - config file in just text?  Wondering if anyone is bothered by the
     perl syntax.


-------------------

Notes for cloning restore shell for afio/tar/cpio types)
Use perl readline module
(Maybe a seperate program or mmodule that runs off a list fed to it)

1) do a listing
2) parse & put into data structures
3) mt bsf 1
4) then give a shell w/ all commands from regular dump
5) mark things for extraction
6) reopen archive & extract that list

Help from restore to jog my brain...

        ls [arg] - list directory
        cd arg - change directory
        pwd - print current directory
        add [arg] - add `arg' to list of files to be extracted
        delete [arg] - delete `arg' from list of files to be extracted
        extract - extract requested files
        setmodes - set modes of requested directories
        quit - immediately exit program
        what - list dump header information
        verbose - toggle verbose flag (useful with ``ls'')
        help or `?' - print this list
If no `arg' is supplied, the current directory is used


Local Variables:
mode: flyspell
end:
