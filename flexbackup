#!/usr/bin/perl -w
######################################################################
#
# Edwin Huffstutler, <edwinh@computer.org>
# $Id$
# $Name$
#
#         >>>> Also see the README file <<<<
#
# USAGE:
#
#  flexbackup -help                : this message
#
#  flexbackup -fs all              : backup all filesystems, level 0
#  flexbackup -fs <x>              : backup filesystem <x>, level 0
#  flexbackup -fs all -level <n>   : backup all filesystems, level n
#  flexbackup -fs <x> -level <n>   : backup filesystem <x>, level n
#  flexbackup -list                : list files in archive at current
#                                    tape position
#  flexbackup -extract             : extract all files from current tape
#                                    position into your current working directory
#  flexbackup -extract -files <f>  : restore the files listed in file <f>
#                                    from current tape position into your
#                                    current working directory
#  flexbackup -compare             : compare archive at current tape position
#                                    with the files in your current directory
#  flexbackup -restore             : as above, but interactive restore
#                                    (dump type only for now)
#  flexbackup [operation] file     : if archiving to files rather than a device,
#                                    list/extract/compare/restore options take
#                                    a filename argument
#  flexbackup -toc                 : list tape table of contents
#                                    with Linux ftape only
#  flexbackup [opt] -c <file>      : use <file> instead of /etc/flexbackup.conf
#                                    for configuration
#  flexbackup [opt] -type <x>      : override $type from config file
#  flexbackup [opt] -compress <x>  : override $compress from config file
#  flexbackup [operation] -reten   : force a retension before any operation
#  flexbackup -fs all -noreten     : don't retension for level 0 "all" backups
#  flexbackup -fs all -noerase     : don't rewind/erase for level 0 "all" backups
#  flexbackup -fs <x> -erase       : force a rewind/erase before backup
#  flexbackup -fs <x> -norewind    : don't rewind tape after a single backup
#  flexbackup [opt] -n             : don't run actual dump or mt commands
#  flexbackup [opt] -d 'var=val'   : override config file setting of $var
#  flexbackup -version             : show version
#
######################################################################
#
#  flexbackup is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2, or (at your option)
#  any later version.
#
#  flexbackup is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with flexbackup; see the file COPYING.  If not, write to
#  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
#
######################################################################

use Getopt::Long;
use English;
use strict;
require 'ctime.pl';

# No output buffering
$OUTPUT_AUTOFLUSH = 1;

package main;

# See if afio is calling us as a control script
if ($ARGV[0] =~ /flexbackup.volume_header_info/) {
    &print_afio_volume_header();
    exit(0);
}

# This is changed during "make install"
$main::CONFFILE="/etc/flexbackup.conf";

%main::opt = ();
if (! &main::GetOptions(\%main::opt,
                        "help",
                        "c=s",
                        "level=i",
                        "fs=s",
                        "extract:s",
                        "files=s",
                        "restore:s",
                        "list:s",
                        "compare:s",
                        "toc",
                        "type=s",
                        "compress=s",
                        "noreten",
                        "noerase",
                        "norewind",
                        "erase",
                        "reten",
                        "version",
                        "n",
                        "d=s%"
		  )) {
    &usage();
    exit(0);
}

# Give usage message
if (defined($main::opt{'help'})) {
    &usage();
    exit(0);
}

# Version
if (defined($main::opt{'version'})) {
    print ('$Id$ ');
    print "\nflexbackup version " . &versionstring() . "\n";
    exit(0);
}


# Get/read config file
print "\nflexbackup version " . &versionstring() . "\n";
&readconfigfile();

# Set OS type
chomp($main::uname = `uname -s`);

# Sanity check
&optioncheck();

# Get current date string
$main::date = &current_time("short");

# Decide what to do
if (defined($main::opt{'restore'})) {
    &restore_routine();

} elsif (defined($main::opt{'extract'})) {
    &extract_routine();

} elsif (defined($main::opt{'compare'})) {
    &compare_routine();

} elsif (defined($main::opt{'list'})) {
    &list_routine();

} elsif (defined($main::opt{'fs'})) {
    &backup_routine();

} elsif (defined($main::opt{'toc'})) {

    if ($cfg::ftape eq 'true') {
        &mt("generic-blksize $main::mt_blksize");
	&mt('rewind');
	exec("vtblc -p -f $cfg::rawdevice");
	die("Failed exec of vtblc");
    } else {
	die("-toc only implemented for ftape under Linux");
    }

}

exit(0);

######################################################################
# Backup
######################################################################
sub backup_routine {

    my @files;
    my $label;
    my $list;
    my $tapecounter = 0;
    my %oldlogs;
    my %oldstamps;
    my $fs;
    my $logext;

    # Get backup level...
    if (defined($main::opt{'level'})) {
        $main::level = $main::opt{'level'};
    } else {
        $main::level = 0;
    }

    # Get rid of trailing /
    $main::opt{'fs'} = &nuke_trailing_slash($main::opt{'fs'});

    # Figure out log file name & empty log file
    $label = &get_label($main::opt{'fs'});
    $main::log = "$cfg::logdir/$cfg::prefix$label.$main::level.$main::date";
    if (! open(LOG,">$main::log")) {
        die "Can't write to $main::log: $OS_ERROR";
    }
    close(LOG);

    &line();
    &mt("generic-blksize $main::mt_blksize");

    # Remove old stamp files
    # ("old" = any higher-numbered stamps for this label)
    opendir(DIR,"$cfg::stampdir") or die("Can't open $cfg::stampdir: $OS_ERROR");
    @files = readdir(DIR);
    foreach (reverse sort @files) {
        next if (! m/^$cfg::sprefix$label\.([0-9])$/);
        if ($1 > $main::level) {
            $oldstamps{"$cfg::stampdir/$_"} = $1
        }
    }
    close(DIR);

    # Remember old log files (will remove at end of job)
    # ("old" = any higher-numbered logs for this label)
    opendir(DIR,"$cfg::logdir") or die("Can't open cfg::logdir: $OS_ERROR");
    @files = readdir(DIR);
    foreach (reverse sort @files) {
        next if (! m/^$cfg::prefix$label\.([0-9])\.([0-9]+)(\.gz|\.bz2|\.Z)?$/);
        if ($1 > $main::level) {
            $oldlogs{"$cfg::logdir/$_"} = $1 . "|" . $2;
        }
    }
    close(DIR);


    ##########################
    #
    # Main backup routine
    #
    ##########################
    # Spew some info
    $_ = &current_time();
    &log("| Current time: $_");
    &log("| Doing level $main::level backup of $main::opt{fs} using $cfg::type");

    if ($main::opt{'fs'} eq 'all') {

        foreach $list (@cfg::filesystems) {

            if ($main::level == 0) {

                &log("| Tape \#$tapecounter filesystems = $list");

                # All
                # Level zero - rewind and erase a new tape
                if (!defined($main::opt{'noreten'})) {
                    &log('| Retensioning tape...');
                    &mt('retension');
                }
                if (!defined($main::opt{'noerase'})) {
                    $main::nextfile = 0;
                    &log('| Rewinding & erasing tape...');
                    &mt('rewind','erase');
                } else {
                    $main::nextfile = &contents();
                    &log('| Making sure tape is at end of data...');
                    &mt('generic-eod');
		}

            } else {

                &log("| Filesystems = $list");

                # All
                # Incremental backup - list what's on it, then go to end of tape
                if (!defined($main::opt{'erase'})) {
                    $main::nextfile = &contents();
                    &log('| Making sure tape is at end of data...');
                    &mt('generic-eod');
                } else {
                    $main::nextfile = 0;
                    &log('| Rewinding & erasing tape...');
                    &mt('rewind','erase');
                }

            }                   # end level == 0 (inside foreach fs, inside all)

            # Show tape position
            &line();
            &mt('generic-query');

            # Iterate over the filesystems and back 'em up
            foreach $fs (split(/\s+/,$list)) {

                # Get rid of trailing /
                $fs = &nuke_trailing_slash($fs);

                &backup($fs);
                $main::nextfile++;
            }

            # Prompt for new tape if more than one set in list & level 0
            if ($main::level == 0) {
                if ($tapecounter < $main::num_tapes) {

                    # Rewind
                    &line();
                    &log("| Rewinding...");
                    &mt('rewind');
                    &update_toc();
                    &line();

                    $tapecounter++;
                    if (!defined($main::use_file)) {
                        print "\n";
                        while(1) {
                        print "---> Insert tape \#$tapecounter (enter y to continue) ";
                            chomp($_ = <STDIN>);
                            last if ($_ =~ m/^y/i);
                        }
                        print "\n";
                        &line();
                    }
                }               # end not at last tape
            }                   # end level == 0 (inside foreach fs, inside all)
        }                       # end foreach fs (inside all)

    } else {

        # Just one filesystem
        if (defined($main::opt{'reten'})) {
            &log('| Retensioning tape...');
            &mt("retension");
        }

        if (defined($main::opt{'erase'})) {
            $main::nextfile = 0;
            &log('| Rewinding & erasing tape...');
            &mt('rewind','erase');
        } else {
            $main::nextfile = &contents();
            &log('| Making sure tape is at end of data...');
            &mt('generic-eod');
        }

        &line();
        &mt('generic-query');

        &backup($main::opt{'fs'});

    } # end all or single fs

    # Rewind unless the user doesn't want that....
    # JR Fri Oct  1 22:54:34 MST 1999
    unless (defined($main::opt{'norewind'})) {
        &line();
        &log("| Rewinding...");
        &mt('rewind');
        &update_toc();

        # Print out new contents
        &contents();
    }

    # Actually remove the old log and stamp files now that we are done
    foreach (sort keys %oldstamps) {
        print "| Removing out of date level $oldstamps{$_} timestamp of $main::opt{fs}\n";
        unlink("$_") or warn("Can't remove $_: $OS_ERROR\n");
    }
    foreach (sort keys %oldlogs) {
        my ($lev,$d) = split(/\|/,$oldlogs{$_});
        print "| Removing old level $lev log of $main::opt{fs} (dated $d)\n";
        unlink("$_") or warn("Can't remove $_: $OS_ERROR\n");
    }

    # Compress log file
    if ($cfg::comp_log ne 'false') {
        my $comp_cmd;
        if ($cfg::comp_log eq "gzip") {
            $logext = "gz";
            $main::comp_cmd .= "gzip -f $main::log";
        } elsif ($cfg::comp_log eq "bzip2") {
            $logext = "bz2";
            $main::comp_cmd .= "bzip2 -f $main::log";
        } elsif ($cfg::comp_log eq "compress") {
            $logext = "Z";
            $main::comp_cmd .= "compress -f $main::log";
        }
        &line("logonly");
        print "| Compressing log ($main::log.$logext)\n";
        system("$main::comp_cmd");
        if ($CHILD_ERROR) {
            warn("error compressing log file\n");
        }
        undef $main::log;
    }

    &line();

    exit(0);

}

######################################################################
# Rewind & print TOC using vtblc
# returns an integer that is the next file number
######################################################################
sub contents {

    my $output;
    my $filenumber;

    if ($cfg::ftape eq "true") {
        &mt('rewind');
        &log('');
        $output=`vtblc -p -f $cfg::rawdevice 2>&1`;
        &log($output);
        &log('');
        $filenumber = -1;
        foreach (split("\n",$output)) {
            # Nr  Id          Label
            #-------------------------------
            #  0 VTBL "/var (level 9)
            next if m/^\s+Nr\s+/;
            next if m/^----------/;
            if (m/^\s+(\d+)\s+\S+\s+\"/) {
                $filenumber = $1;
            }
        }

    } else {

        $filenumber = 0;
    }

    $filenumber++;
    return($filenumber);
}

######################################################################
# Modify a table of contents entry
######################################################################
sub tag {

    my $filenum = shift(@_);
    my $title = shift(@_);

    system("vtblc -f $cfg::rawdevice -# $filenum -m date -m label=\'$title\'");

}

######################################################################
# Backup a filesystem
######################################################################
sub backup {

    my $dir = shift(@_);
    my $title;
    my @cmds;
    my @echo_cmds;
    my $cmd;
    my $localdir = $dir;
    my $label = &get_label($dir);
    my $host;

    &line();

    if ($localdir =~ s/^(.+):(.+)$/$2/) {
	$main::remote = $1;
	chomp($main::tapehost = `hostname`);
        if ($main::tapehost eq $main::remote) {
            die("Remote host and this host are the same! no banana for you!");
        }

    } else {
        $main::remote = '';
    }

    # Create file name if writing to a file
    # (config file's $device points to a dir in this case)
    if (defined($main::use_file)) {
        $_ = $main::level . "." . $main::date . "." . $cfg::type;
        if ($cfg::type =~ m/^(tar|dump|cpio)$/) {
            if ($cfg::compress eq "gzip") {
                $_ .= ".gz";
            } elsif ($cfg::compress eq "bzip2") {
                $_ .= ".bz2";
            } elsif ($cfg::compress eq "compress") {
                $_ .= ".Z";
            }
        } elsif ($cfg::type eq "afio") {
            # tag these a little different, the archive file itself isn't a
            # .gz or .bz2, but the files in it are....
            if ($cfg::compress eq "gzip") {
                $_ .= "-gz";
            } elsif ($cfg::compress eq "bzip2") {
                $_ .= "-bz2";
            } elsif ($cfg::compress eq "compress") {
                $_ .= "-Z";
            }
        }
        $main::device = $cfg::device . "/" . $label . "." . $_;
    }

    # Just get the date for now; don't write the timestamp
    # Until after the backup has run
    $main::date_at_start = &current_time();

    # Label for this archive
    $host = `hostname`;
    chomp($host);
    $_ = "+" . $cfg::compress;
    $_ =~ s/\+false//;
    $title = "level $main::level $dir $main::date_at_start $cfg::type" . "$_ flexbackup on $host";
    $title =~ s/\+flexbackup/ flexbackup /;
    $main::title{$main::nextfile} = $title;

    # If we started with level 0, and "all", and -noerase not given,
    # we know the file number, since we erased the tape
    # (or if using ftape/vtblc, since we can find the file number)
    # (or if we had -erase on the commandline)
    if ((($main::opt{'fs'} eq "all") and ($main::level == 0) and (!defined($main::opt{'noerase'})))
        or
        ($cfg::ftape eq "true")
        or
        ($main::opt{'erase'})) {
        &log("| File number: $main::nextfile");
    }

    &log("| Backup of: $dir");
    if ($cfg::type eq 'dump') {
        if (defined($cfg::exclude_expr[0])) {
            &log("| Note: \$exclude_expr is ignored for dump");
        }
	@cmds = &backup_dump($label,$localdir);
    } elsif ($cfg::type eq 'afio') {
	@cmds = &backup_afio($label,$localdir,$title);
    } elsif ($cfg::type eq 'tar') {
	@cmds = &backup_tar($label,$localdir,$title);
    } elsif ($cfg::type eq 'cpio') {
	@cmds = &backup_cpio($label,$localdir,$title);
    } elsif ($cfg::type eq 'zip') {
	@cmds = &backup_zip($label,$localdir,$title);
    }

    # Strip multiple spaces
    foreach (@cmds) {
        s/\s+/ /g;
    }

    # Format commands for nice printing
    @echo_cmds = @cmds;
    foreach (@echo_cmds) {
        # Split long lines.  This looks convolved but it auto-wraps the
        # command lines down to a nice width for printing...
        my @chunks = split(" ",$_);
        my $line = "";
        my $linelimit = 76;
        while (@chunks) {
            while ($_ = shift(@chunks)) {
                if (length($_) < $linelimit ) {
                    # Item is less than $linelimit -
                    # check to see if total line length is over, if so
                    # save it for next line
                    if ((length($line) + length($_)) > $linelimit) {
                        unshift(@chunks,$_);
                        last;
                    }
                } else {
                    # Single item longer than $linelimit -
                    # wait till we have a blank line
                    if ($line !~ /^ ?$/) {
                        unshift(@chunks,$_);
                        last;
                    }
                }
                # Add this item to the line
                $line .= $_ . " ";
            }

            # Print backslash at end unless the last line
            if (@chunks) {
                $_ = '\\';
            } else {
                $_ = "";
            }

            # What a mess we went through above, just to print it...
            &log("| $line" . $_);

            # Indent next line(s) by one space
            $line = " ";
        }
    }
    &line();

    # Enough fooling around... run it.
    if (!defined($main::opt{'n'})) {
        foreach $cmd (@cmds) {
            system("($cmd) 2>&1 | tee -a $main::log");
            if ($CHILD_ERROR) {
                &log("$cfg::type: error from backup, exiting");
                &log("offending command: $cmd");
                exit(1);
            }
        }
    } else {
        &log("(debug) command output would be here");
    }
    &line();

    # Create timestamp file, but use date from before the backup started
    # so next time we will catch files that might have been toucehd during the run
    $_ = &current_time();
    &log("| Backup start: $main::date_at_start $cfg::sprefix$label.$main::level");
    &log("| Current time: $_");
    system("touch $main::touch_flag \"$main::date_at_start\" $cfg::stampdir/$cfg::sprefix$label.$main::level");

    # Got errors unless I paused before trying to access the tape right way...
    if ((!defined($main::opt{'n'})) and (!defined($main::use_file))) {
        sleep 10;
    }
    &line();

    # Show where we are on the tape
    &mt('generic-query');

}

######################################################################
# Return command to backup a filesystem using dump
######################################################################
sub backup_dump {

    my $label = shift(@_);
    my $dir = shift(@_);
    my $cmd = '';
    my $tmpstamp = "$cfg::tmpdir/refdate.$$";
    my $date_flag;

    # With this one we don't have to put a stampfile on the remote system
    # since we only need the date string
    if ($main::level == 0) {
        &get_last_date($label); # Just to print dates, don't need result
        $date_flag = "";
    } else {
        $_ = &get_last_date($label);
        $date_flag = "-T \"$_\" ";
    }

    $cmd .= "dump -$main::level ";
    $cmd .= "$main::dump_blk_flag ";
    if ($cfg::dump_use_dumpdates eq "true") {
        $cmd .= "-u ";
    } else {
        $cmd .= $date_flag;
    }
    $cmd .= "$main::dump_len_flag ";
    $cmd .= "-f - ";
    $cmd .= "$dir $main::z";
    if ($main::remote and ($cfg::buffer eq "true")) {
        $cmd .= "$main::buffer_cmd";
    }

    # Wrap all that together
    $cmd = &maybe_remote_cmd($cmd);

    # Append writer stuff
    $cmd .= "$main::buffer_cmd $main::buffer_write_flags" . "$main::device";

    return($cmd);


}

######################################################################
# Return command to backup a filesystem using afio
######################################################################
sub backup_afio {

    my $label = shift(@_);
    my $dir = shift(@_);
    my $title = shift(@_);
    my $cmd = '';
    my $tmpstamp = "$cfg::tmpdir/refdate.$$";
    my $tmplabel = "$cfg::tmpdir/label.$$";
    my $tmpnocompress = "$cfg::tmpdir/nocompress.$$";
    my $remove;
    my $no_compress = '';

    $_ = &get_last_date($label);

    $cmd .= "touch $main::touch_flag \"$_\" $tmpstamp ; ";

    # list of file exenstions to not compress
    if (($cfg::compress !~ /^(false|hardware)$/) and ($cfg::nocompress_types ne "")) {
        $cmd .= "echo \"$cfg::nocompress_types\" > $tmpnocompress ; ";
        $no_compress = "-E $tmpnocompress";
    }

    $cmd .= "printf \"\\nVolume Label:\\n$title\\n\\n\" > $tmplabel ; ";

    $cmd .= "cd $dir ; ";
    $cmd .= "(echo //--$tmplabel flexbackup.volume_header_info && ";
    $cmd .= "find . -xdev ";
    $cmd .= "-newer $tmpstamp ";
    $cmd .= "-print ";
    $cmd .= "$main::exclude_cmd ";
    $cmd .= ") | ";
    $cmd .= "afio -o ";
    $cmd .= "$no_compress ";
    $cmd .= "-z ";
    $cmd .= "$main::afio_z_flag ";
    $cmd .= "$main::afio_verb_flag ";
    $cmd .= "$main::afio_sparse_flag ";
    $cmd .= "$main::afio_bnum_flag ";
    $cmd .= "$main::afio_blk_flag ";
    $cmd .= "-";
    if ($main::remote and ($cfg::buffer eq "true")) {
        $cmd .= "$main::buffer_cmd";
    }
    $remove = "$tmpstamp $tmplabel";
    if ($no_compress ne '') {
        $remove .= " $tmpnocompress";
    }
    $cmd .= " ; rm -f $remove";

    # Wrap all that together
    $cmd = &maybe_remote_cmd($cmd);

    # Append writer stuff
    $cmd .= "$main::buffer_cmd $main::buffer_write_flags" . "$main::device";

    return($cmd);

}

######################################################################
# Return command to backup a filesystem using cpio
######################################################################
sub backup_cpio {

    my $label = shift(@_);
    my $dir = shift(@_);
    my $title = shift(@_);
    my $cmd = '';
    my $tmpstamp = "$cfg::tmpdir/refdate.$$";

    $_ = &get_last_date($label);

    $cmd .= "touch $main::touch_flag \"$_\" $tmpstamp ; ";

    # Kludge a title for by replacing / with - in the title
    # then touch a file in the dir we are going to back up.
    $title =~ s%/%-%g;
    $title =~ s% %_%g;
    $cmd .= "touch \"$dir/$title\" ; ";

    $cmd .= "cd $dir ; ";
    $cmd .= "find . -xdev ";
    $cmd .= "-newer $tmpstamp ";
    $cmd .= "-print ";
    $cmd .= "$main::exclude_cmd ";
    $cmd .= "| ";
    $cmd .= "cpio --create ";
    $cmd .= "--format $cfg::cpio_format ";
    $cmd .= "$main::cpio_verb_flag ";
    $cmd .= "$main::cpio_sparse_flag ";
    $cmd .= "$main::cpio_blk_flag ";
    $cmd .= "$main::z";
    if ($main::remote and ($cfg::buffer eq "true")) {
        $cmd .= "$main::buffer_cmd";
    }
    $cmd .= " ; rm -f $tmpstamp \"$dir/$title\"";

    # Wrap all that together
    $cmd = &maybe_remote_cmd($cmd);

    # Append writer stuff
    $cmd .= "$main::buffer_cmd $main::buffer_write_flags" . "$main::device";

    return($cmd);

}

######################################################################
# Return command to backup a filesystem using tar
######################################################################
sub backup_tar {

    my $label = shift(@_);
    my $dir = shift(@_);
    my $title = shift(@_);
    my $cmd = '';
    my $date_flag;
    my $tmpexclude = "$cfg::tmpdir/exclude.$$";
    my $exclude_flag = '';

    # With this one we don't have to put a stampfile on the remote system
    # since we only need the date string
    if ($main::level == 0) {
        &get_last_date($label); # Just to print dates, don't need result
        $date_flag = "";
    } else {
        $_ = &get_last_date($label,'readable');
        $date_flag = "--newer \"$_\"";
    }

    # Have to handle this differently for tar, since we aren't using find in the first place.
    # find everything that _matches_ the regexp, then use it as an exclude list for tar
    if (defined($cfg::exclude_expr[0])) {
        $cmd .= "rm -f $tmpexclude ; ";
        foreach (@main::not_include_cmds) {
            $cmd .= "find $dir -xdev $_ >> $tmpexclude ; ";
        }
        $exclude_flag = "--exclude-from $tmpexclude";
    }

    $cmd .= "tar --create ";
    $cmd .= "--directory $dir ";
    $cmd .= "--one-file-system ";
    $cmd .= "$date_flag ";
    $cmd .= "$exclude_flag ";
    $cmd .= "--same-permissions ";
    $cmd .= "--same-order ";
    $cmd .= "--totals ";
    $cmd .= "--label \"$title\" ";
    $cmd .= "$main::tar_atime_flag ";
    $cmd .= "$main::tar_verb_flag ";
    $cmd .= "$main::tar_sparse_flag ";
    $cmd .= "$main::tar_recnum_flag ";
    $cmd .= "$main::tar_blk_flag ";
    $cmd .= "--file - ";
    $cmd .= ". $main::z";
    if ($main::remote and ($cfg::buffer eq "true")) {
        $cmd .= "$main::buffer_cmd";
    }
    if (defined($cfg::exclude_expr[0])) {
        $cmd .= " ; rm -f $tmpexclude";
    }

    # Wrap all that together
    $cmd = &maybe_remote_cmd($cmd);

    # Append writer stuff
    $cmd .= "$main::buffer_cmd $main::buffer_write_flags" . "$main::device";

    return($cmd);

}

######################################################################
# Return command to backup a filesystem using zip
######################################################################
sub backup_zip {

    my $label = shift(@_);
    my $dir = shift(@_);
    my $title = shift(@_);
    my $cmd = '';
    my @cmds;
    my $tmpstamp = "$cfg::tmpdir/refdate.$$";
    my $tmp = "$cfg::tmpdir/tmp$$.zip";

    $_ = &get_last_date($label);

    # Kludge a title by replacing / with - in the title
    # then touch a file in the dir we are going to back up.
    $title =~ s%/%-%g;
    $title =~ s% %_%g;
    $cmd .= "touch \"$dir/$title\" ; ";

    $cmd .= "touch $main::touch_flag \"$_\" $tmpstamp ; ";

    $cmd .= "cd $dir ; ";
    $cmd .= "find . -xdev ";
    $cmd .= "-newer $tmpstamp ";
    $cmd .= "-print | ";
    $cmd .= "sed -e \"s%^\./%%\" ";
    $cmd .= "$main::exclude_cmd ";
    $cmd .= "| ";
    $cmd .= "zip -@ ";
    $cmd .= "-b $cfg::tmpdir "; # temp file path
    $cmd .= "-y "; # store symlinks
    $cmd .= "$main::zip_compr_flag ";
    $cmd .= "$main::zip_noz_flag "; # nocompress list
    $cmd .= "$main::zip_verb_flag "; # verbose flag
    $cmd .= "$tmp";

    # Wrap all that together
    $cmd = &maybe_remote_cmd($cmd);
    push(@cmds,$cmd);

    $cmd = "cat $tmp ";
    if ($main::remote and ($cfg::buffer eq "true")) {
        $cmd .= "$main::buffer_cmd";
    }
    $cmd .= " ; rm -f $tmpstamp \"$dir/$title\" $tmp";

    # Wrap all that together
    $cmd = &maybe_remote_cmd($cmd);

    # Append writer stuff
    $cmd .= "$main::buffer_cmd $main::buffer_write_flags" . "$main::device";

    push(@cmds,$cmd);

    return(@cmds);

}

######################################################################
# List the files in an archive
######################################################################
sub list_routine {

    my $cmd = &setup_before_read();

    if ($cfg::type eq 'dump') {
	$cmd .= "restore -t ";
        $cmd .= "$main::dump_verb_flag ";
        $cmd .= "$main::dump_blk_flag ";
        $cmd .= "-f -";

    } elsif ($cfg::type eq 'afio') {
        $cmd .= "afio -t ";
        $cmd .= "-z ";
        $cmd .= "-D $0 ";
        $cmd .= "$main::afio_unz_flag ";
        $cmd .= "$main::afio_verb_flag ";
        $cmd .= "$main::afio_sparse_flag ";
        $cmd .= "$main::afio_bnum_flag ";
        $cmd .= "$main::afio_blk_flag ";
        $cmd .= "-";

    } elsif ($cfg::type eq 'tar') {
        $cmd .= "tar --list ";
        $cmd .= "--totals ";
        $cmd .= "$main::tar_verb_flag ";
        $cmd .= "$main::tar_sparse_flag ";
        $cmd .= "$main::tar_recnum_flag ";
        $cmd .= "$main::tar_blk_flag ";
        $cmd .= "-B ";
        $cmd .= "--file -";

    } elsif ($cfg::type eq 'cpio') {
        $cmd .= "cpio --list ";
        $cmd .= "$main::cpio_verb_flag ";
        $cmd .= "$main::cpio_blk_flag";

    } elsif ($cfg::type eq 'zip') {
        my $tmpfile = "$cfg::tmpdir/zip.$$";
        $cmd .= "cat > $tmpfile ; ";
        $cmd .= "unzip -l ";
        $cmd .= "$main::zip_verb_flag ";
        $cmd .= "$tmpfile ; ";
        $cmd .= "rm -f $tmpfile";

    }

    &run_or_echo_then_query($cmd);

}

######################################################################
# Extract files (maybe a list) to current directory
######################################################################
sub extract_routine {

    my $cmd = &setup_before_read();
    my $restore_files = '';
    my $newlist = "$cfg::tmpdir/extract.$$";

    if (defined($main::opt{'files'})) {
        # Have to get a list of the files for restore to use
        open(LIST,"$main::opt{files}") or die ("Can't open $main::opt{files}: $OS_ERROR");
        open(NEWLIST,">$newlist") or die ("Can't open $newlist: $OS_ERROR");
        while(<LIST>) {
            chomp;
            $_ =~ s%^/%%;
            $_ =~ s%^\./%%;
            print NEWLIST "$_\n";
            $restore_files .= " $_";
        }
        close(LIST);
        close(NEWLIST);
        &log("| Extracting files listed in $main::opt{files}");
    }

    if ($cfg::type eq 'dump') {
	$cmd .= "restore -x ";
        $cmd .= "$main::dump_verb_flag ";
        $cmd .= "$main::dump_blk_flag ";
        $cmd .= "-f -";
        if (defined($main::opt{'files'})) {
            $cmd .= "$restore_files";
        }

    } elsif ($cfg::type eq 'afio') {
        $cmd .= "afio -i ";
        if (defined($main::opt{'files'})) {
            $cmd .= "-w $newlist ";
        }
        $cmd .= "-z ";
        $cmd .= "-x ";
        $cmd .= "-D $0 ";
        $cmd .= "$main::afio_unz_flag ";
        $cmd .= "$main::afio_verb_flag ";
        $cmd .= "$main::afio_sparse_flag ";
        $cmd .= "$main::afio_bnum_flag ";
        $cmd .= "$main::afio_blk_flag ";
        $cmd .= "-";

    } elsif ($cfg::type eq 'tar') {
        $cmd .= "tar --extract ";
        if (defined($main::opt{'files'})) {
            $cmd .= "--files-from $newlist ";
        }
        $cmd .= "--totals ";
        $cmd .= "--same-permissions ";
        $cmd .= "--same-order ";
        $cmd .= "$main::tar_verb_flag ";
        $cmd .= "$main::tar_sparse_flag ";
        $cmd .= "$main::tar_recnum_flag ";
        $cmd .= "$main::tar_blk_flag ";
        $cmd .= "-B ";
        $cmd .= "--file -";

    } elsif ($cfg::type eq 'cpio') {
        $cmd .= "cpio --extract ";
        if (defined($main::opt{'files'})) {
            $cmd .= "--pattern-file $newlist ";
        }
        $cmd .= "--preserve-modification-time ";
        $cmd .= "--make-directories ";
        $cmd .= "$main::cpio_verb_flag ";
        $cmd .= "$main::cpio_blk_flag";

    } elsif ($cfg::type eq 'zip') {
        my $tmpfile = "$cfg::tmpdir/zip.$$";
        $cmd .= "cat > $tmpfile ; ";
        $cmd .= "unzip ";
        $cmd .= "$main::zip_verb_flag ";
        $cmd .= "$tmpfile ";
        if (defined($main::opt{'files'})) {
            $cmd .= "$restore_files ";
        }
        $cmd .= "; ";
        $cmd .= "rm -f $tmpfile";

    }

    &run_or_echo_then_query($cmd);

    if (defined($main::opt{'files'})) {
        unlink("$newlist") or die ("Can't remove $newlist: $OS_ERROR");
    }
}

######################################################################
# Compare an archive to current directory
######################################################################
sub compare_routine {

    my $cmd = &setup_before_read();

    if ($cfg::type eq 'dump') {
	$cmd .= "restore -C ";
        $cmd .= "$main::dump_blk_flag ";
        $cmd .= "-f -";

    } elsif ($cfg::type eq 'afio') {
        $cmd .= "afio -r ";
        $cmd .= "-z ";
        $cmd .= "-D $0 ";
        $cmd .= "$main::afio_unz_flag ";
        $cmd .= "$main::afio_sparse_flag ";
        $cmd .= "$main::afio_blk_flag ";
        $cmd .= "-";

    } elsif ($cfg::type eq 'tar') {
        $cmd .= "tar --diff ";
        $cmd .= "--totals ";
        $cmd .= "$main::tar_blk_flag ";
        $cmd .= "$main::tar_sparse_flag ";
        $cmd .= "$main::tar_recnum_flag ";
        $cmd .= "-B ";
        $cmd .= "--file -";

    } elsif ($cfg::type eq 'cpio') {
        die("cpio not capable of comparing files");

    } elsif ($cfg::type eq 'zip') {
        die("zip not capable of comparing files");

    }

    &run_or_echo_then_query($cmd);

}

######################################################################
# Interactive restore
######################################################################
sub restore_routine {

    my $cmd = &setup_before_read();

    if ($cfg::type eq 'dump') {
	$cmd .= "restore -i ";
        $cmd .= "$main::dump_verb_flag ";
        $cmd .= "$main::dump_blk_flag ";
        $cmd .= "-f -";

    } elsif ($cfg::type eq 'afio') {
        die("Interactive restore for $cfg::type not implemented yet");

    } elsif ($cfg::type eq 'cpio') {
        die("Interactive restore for $cfg::type not implemented yet");

    } elsif ($cfg::type eq 'tar') {
        die("Interactive restore for $cfg::type not implemented yet");

    } elsif ($cfg::type eq 'zip') {
        die("Interactive restore for $cfg::type not implemented yet");

    }

    &run_or_echo_then_query($cmd);

}

######################################################################
# Return the "label" name of the filesystem/dir
######################################################################
sub get_label {

    my $path = shift(@_);
    my $host = '';
    my $label;

    if ($path =~ m/(\S+):(\S+)/) {
        $host = $1 . "-";
        $label = $2;
    } else {
        $label = $path;
    }

    $label =~ s%^/%%; # nuke leading slash
    $label =~ s%/%-%g; # turn / into -
    $label = 'root' if ($label eq '');

    return($host . $label);

}

######################################################################
# Return a date string of the timestamp file
# from the last dump of this level or lower
#   in ctime format normally
#   in YYYYMMDDhhmm.ss format if touch_flag is set to -t
#   or unconditionally in ctime format if 2nd argument is given
######################################################################
sub get_last_date {

    my $label = shift(@_);
    my $readable = shift(@_);
    my $file;
    my $numeric_val;
    my $string_val;
    my $return_val;
    my $lastlevel = 0;
    my $targetfile = '';

    # Find last stamp file
    opendir(DIR,"$cfg::stampdir") or die("Can't open $cfg::stampdir: $OS_ERROR");
    my @files = readdir(DIR);
    foreach $file (reverse sort @files) {
        next if ($file !~ m/^$cfg::sprefix$label\.([0-9])$/);
        if ($1 <= $main::level) {
            $targetfile = "$cfg::stampdir/$file";
            $lastlevel = $1;
            last;
        }
    }
    close(DIR);

    # get date from targetfile
    # or complain if level > 0 and no timestamp
    # or use the epoch for level 0
    if ($main::level == 0) {
        $numeric_val = '197001010000.00';
        # Need a slightly different format for dump -T
        if (($cfg::type eq "dump") and ($cfg::dump_use_dumpdates eq "false")) {
            $string_val = "Thu Jan 01 00:00:00 1970";
        } else {
            $string_val = "Thu Jan  1 00:00:00 MST 1970";
        }
    } elsif ($targetfile ne '') {
        if (($cfg::type eq "dump") and ($cfg::dump_use_dumpdates eq "false")) {
            # Need a format w/o the timezone field for dump -T
            chomp($string_val = `date -r $targetfile '+%a %b %d %H:%M:%S %Y'`);
        } else {
            chomp($string_val = `date -r $targetfile`);
        }
        chomp($numeric_val = `date -r $targetfile +%Y%m%d%H%M.%S`);

    } else {
        die("Can't do a level $main::level backup - no level 0 timestamp found");

    }

    # what kind of touch flag we are using determines the return type
    # dump -T always expects the string type though
    if (($main::touch_flag eq "-d")
        or
        (($cfg::type eq "dump") and ($cfg::dump_use_dumpdates eq "false"))) {
        $return_val = $string_val;
    } else {
        $return_val = $numeric_val;
    }

    &log("| Date of this level $main::level backup: $main::date_at_start");
    if ($main::level == 0) {
        &log("| Date of last level $lastlevel backup: the epoch");
    } else {
        &log("| Date of last level $lastlevel backup: $return_val");
    }
    &line();

    if (defined($readable)) {
        return($string_val);
    } else {
        return($return_val);
    }
}

######################################################################
# Echo message to screen and log
######################################################################
sub log {

    my $msg = shift(@_);

    print "$msg\n";
    if (defined($main::log)) {
        open(LOG,">>$main::log");
        print LOG "$msg\n";
        close(LOG);
    }

}

######################################################################
# Echo a line to both screen and log
######################################################################
sub line {

    my $logonly = shift(@_);

    if (!defined($logonly)) {
        print "|------------------------------------------------\n";
    }
    if (defined($main::log)) {
        open(LOG,">>$main::log");
        print LOG "|------------------------------------------------\n";
        close(LOG);
    }

}

######################################################################
# Read configuration file
######################################################################
sub readconfigfile {

    my $configfile;
    my $var;
    my $value;
    my $defines = $main::opt{'d'};

    if (defined($main::opt{'c'})) {
        $configfile = $main::opt{'c'};
    } else {
        $configfile = $main::CONFFILE;
    }
    if (! -r $configfile) {
        die("config file $configfile: $OS_ERROR");
    }
    system("perl -c $configfile 2>&1");
    if ($CHILD_ERROR) {
        die("syntax error in config file $configfile");
    }

    package cfg;
    require "$configfile";
    package main;

    # Overrides
    foreach $var (keys %$defines) {
        $value = $$defines{$var};
        &log("(override) $var = $value");
        eval("\$cfg::$var=\"$value\"");
    }

}

######################################################################
# Do a tape operation
######################################################################
sub mt {

    my (@operations) = (@_);
    my $operation;
    my $oldoperation;
    my $out;

    # Set hardware compression when we do the blocksize
    # Can someone who has a drive that does this tell me if this works???
    if ($cfg::compress eq "hardware") {
        foreach (@operations) {
            if ($_ =~ m/generic-blksize/) {
                push(@operations,'compression 1');
            }
        }
    }

    foreach $operation (@operations) {

        # mt & ftmt slightly different
        if ($operation eq 'generic-query') {
            if ($cfg::ftape eq 'true') {
                $operation = 'getsize';
            } else {
                $operation = 'status';
            }
        }

        # mt & ftmt slightly different
        if ($operation eq 'generic-eod') {
            if ($cfg::ftape eq 'true') {
                $operation = 'eom';
            } else {
                $operation = 'eod';
            }
        }

        # BSD mt is slightly different
        if ($main::uname =~ /BSD/) {
            $operation =~ s/generic-blksize/blocksize/;
        } else {
            $operation =~ s/generic-blksize/setblk/;
        }


        if (defined($main::use_file)) {
            if (defined($main::opt{'fs'})) {
                &log("| Archiving to file; \"mt $operation\" skipped");
            } else {
                &log("| Reading from file; \"mt $operation\" skipped");
            }

        } elsif (defined($main::opt{'n'})) {
            &log("| (debug) $main::mt -f $main::device $operation");

        } else {

            if ($operation =~ /setblk/) {
                # Try and see which of setblk/defblksize will work
                # This is kludgy, but doable
                chomp($out = `$main::mt -f $main::device $operation 2>&1`);
                if ($CHILD_ERROR) {
                    &log("| Trying \"mt defblksize\" instead of \"mt setblk\"");
                    $oldoperation = $operation;
                    $operation =~ s/setblk/defblksize/;
                    chomp($out = `$main::mt -f $main::device $operation 2>&1`);
                    if ($CHILD_ERROR) {
                        &log("Error setting block size");
                        &log("Neither of these commands worked:");
                        &log("  $main::mt -f $main::device $oldoperation");
                        &log("  $main::mt -f $main::device $operation");
                        exit(1);
                    } # error on second guess
                } # error on first guess
            } # operation = setblk

            if (defined($main::log)) {
                system("$main::mt -f $main::device $operation 2>&1 | tee -a $main::log");
            } else {
                system("$main::mt -f $main::device $operation 2>&1");
            }

            if ($CHILD_ERROR) {
                &log("Error from $main::mt $operation\n");
                exit(1);
            }

        } # not a file

    } # foreach operation

}

######################################################################
# Option error checking & init stuff
######################################################################
sub optioncheck {

    # Archive type on commandline
    if (defined($main::opt{'type'})) {
        $cfg::type = $main::opt{'type'};
    }

    # Compress flag on commandline
    if (defined($main::opt{'compress'})) {
        $cfg::compress = $main::opt{'compress'};
    }

    # First check if things are defined in the config file
    # Checks exist, true/false, or one of options
    &check(\$cfg::type,'type','dump afio tar cpio zip');
    &check(\$cfg::compress,'compress','gzip bzip2 compress false hardware');
    &check(\$cfg::compr_level,'compr_level','exist');
    &check(\$cfg::verbose,'verbose');
    &check(\$cfg::sparse,'sparse');
    &check(\$cfg::buffer,'buffer');
    &check(\$cfg::buffer_megs,'buffer_megs','exist');
    &check(\$cfg::device,'device','exist');
    &check(\$cfg::blksize,'blksize','exist');
    &check(\$cfg::mt_var_blksize,'mt_var_blksize');
    &check(\$cfg::nocompress_types,'nocompress_types','exist');
    &check(\$cfg::remoteshell,'remoteshell','ssh ssh2 ssh1 rsh');
    &check(\$cfg::logdir,'logdir','exist');
    &check(\$cfg::tmpdir,'tmpdir','exist');
    &check(\$cfg::comp_log,'comp_log','gzip bzip2 compress false');
    &check(\$cfg::stampdir,'stampdir','exist');
    &check(\$cfg::prefix,'prefix','exist');
    &check(\$cfg::sprefix,'sprefix','exist');
    &check(\$cfg::afio_echo_block,'afio_echo_block');
    &check(\$cfg::afio_compress_cache_size,'afio_compress_cache_size','exist');
    &check(\$cfg::afio_compress_threshold,'afio_compress_threshold','exist');
    &check(\$cfg::tar_echo_record_num,'tar_echo_record_num');
    &check(\$cfg::tar_atime_preserve,'tar_atime_preserve');
    &check(\$cfg::dump_length,'dump_length','exist');
    &check(\$cfg::dump_use_dumpdates,'dump_use_dumpdates');
    &check(\$cfg::cpio_format,'cpio_format','bin odc newc crc tar ustar hpbin hpodc');
    &check(\$cfg::ftape,'ftape');
    &check(\$cfg::rawdevice,'rawdevice','exist');
    if (@main::errors) {
        print "\nErrors:\n";
        while(@main::errors) {
            print " " . pop(@main::errors) . "\n";
        }
        exit(1);
    }

    # Check device (or dir)
    if (-c $cfg::device) {
        # ok
    } elsif (-d $cfg::device) {
        if ($cfg::device !~ m:^/:) {
            push(@main::errors,"Please give full path, not relative (\$device=$cfg::device)");
        } else {
            $main::use_file = 1;
            $cfg::device =~ s:/$::; # nuke trailing slash if any
        }
    } else {
        push(@main::errors,"\$device must be set to a directory or a device");
    }
    $main::device = $cfg::device;

    # Can we write to it?
    if (! -w $main::device) {
        push(@main::errors,"Can't write to $main::device");
    }

    # Exclude regexp for find
    $main::exclude_cmd = '';
    @main::not_include_cmds = ();
    # Deal with the old non-array setting that may be in the config file
    if (!defined($cfg::exclude_expr[0]) and defined($cfg::exclude_expr)) {
        $cfg::exclude_expr[0] = $cfg::exclude_expr;
    }
    if (defined($cfg::exclude_expr[0])) {
        &checkinpath("egrep");
        my @excl_array;
        foreach (@cfg::exclude_expr) {
            # If the user put "*.whatever" as an expression, better turn this
            # "glob" into a regex just to be sure ...
            if (/^\*/) {
                $_ =~ s/^\*/.*/;
            }
            push(@excl_array, "egrep -v \"$_\"");
            push(@main::not_include_cmds, "| egrep \"$_\"");
        }
        $main::exclude_cmd = "| " . join(" | ", @excl_array);
    }

    # Block size
    if ($cfg::blksize !~ m/^\d+$/) {
        push(@main::errors,"\$blksize must be set to an integer");
    }

    # mt uses blocksize of bytes not k.  Also check for variable size
    if ($cfg::mt_var_blksize eq "true") {
        $main::mt_blksize = 0;
    } else {
        $main::mt_blksize = $cfg::blksize * 1024;
    }
    # buffer blocksize needs k appended
    $main::buffer_blk_flag = "-s " . $cfg::blksize . "k";
    # dd blocksize needs k appended
    $main::dd_blk_flag = "bs=" . $cfg::blksize . "k";
    # afio blocksize needs k appended
    $main::afio_blk_flag = "-b " . $cfg::blksize . "k";
    # dump blocksize just in k like the config file
    $main::dump_blk_flag = "-b $cfg::blksize";
    # tar blocks are in 512-byte units
    # long name is really --blocking-factor but changed from --block-size
    # only in recent versions.  just use the short flag.
    $main::tar_blk_flag =  $cfg::blksize * 2;
    $main::tar_blk_flag = "-b $main::tar_blk_flag";
    # cpio blocks are in bytes
    $main::cpio_blk_flag = $cfg::blksize * 1024;
    $main::cpio_blk_flag = "--io-size $main::cpio_blk_flag";

    # Generic compression (afio/zip archives will do their own flags)
    if ($cfg::compress eq "gzip") {
        &checkinpath($cfg::compress);
        if ($cfg::compr_level !~ m/^[123456789]$/) {
            push(@main::errors,"\$compr_level must be set to 1-9");
        } else {
            $main::z = " | $cfg::compress -$cfg::compr_level";
        }
        $main::unz = "$cfg::compress -dq | ";

    } elsif ($cfg::compress eq "bzip2") {
        &checkinpath($cfg::compress);
        if ($cfg::compr_level !~ m/^[123456789]$/) {
            push(@main::errors,"\$compr_level must be set to 1-9");
        } else {
            $main::z = " | $cfg::compress -$cfg::compr_level";
        }
        $main::unz = "$cfg::compress -d | ";

    } elsif ($cfg::compress eq "compress") {
        &checkinpath($cfg::compress);
        $main::z = " | $cfg::compress -c";
        $main::unz = "$cfg::compress -dc | ";

    } else {
        $main::z = "";
        $main::unz = "";
    }

    # Buffer stuff
    # Just use dd if buffer is disabled
    if ($cfg::buffer eq "true") {
        &checkinpath('buffer');
        if ($cfg::buffer_megs =~ m/^\d+$/) {
            $main::buffer_megs = $cfg::buffer_megs . "m";
            $main::buffer_cmd = " | buffer -m $main::buffer_megs $main::buffer_blk_flag";
            if (!defined($main::use_file)) {
                $main::buffer_write_flags = "-u 100 -t -p 75 -B -o ";
                $main::buffer_read_flags = "-u 100 -t -p 75 -B -i ";
            } else {
                $main::buffer_write_flags = "-t -p 75 -B -o ";
                $main::buffer_read_flags = "-t -p 75 -B -i ";
            }
            $main::read_cmd = "buffer -m $main::buffer_megs $main::buffer_blk_flag $main::buffer_read_flags";
        } else {
            push(@main::errors,"\$buffer_megs must be set to integer number of megabytes");
        }
    } else {
        &checkinpath('dd');
        $main::buffer_cmd = " | dd $main::dd_blk_flag";
        $main::buffer_write_flags = "of=";
        $main::read_cmd = "dd $main::dd_blk_flag if=";
    }

    # Check for type of touch flag
    if ($main::uname =~ /BSD/) {
        $main::touch_flag = "-t";
    } else {
        $main::touch_flag = "-d";
    }

    # Check we can find rsh or ssh
    &checkinpath($cfg::remoteshell);

    # Check we can find common stuff
    &checkinpath('touch');
    &checkinpath('date');
    &checkinpath('hostname');
    &checkinpath('tee');
    &checkinpath('rm');
    &checkinpath('find');

    # Ftape support
    if ($cfg::ftape eq 'true') {
        &checkinpath('ftmt');
        &checkinpath('vtblc');
        $main::mt = 'ftmt';
    } else {
        &checkinpath('mt');
        $main::mt = 'mt';
    }

    # Filesystems
    $main::num_tapes = -1;
    foreach (@cfg::filesystems) {
        $main::num_tapes++;
    }
    if ($main::num_tapes == -1) {
        push(@main::errors,"no filesystem spec for \"all\" backups (\$filesystem[0] not defined)");
    }

    # Verbose flag
    if ($cfg::verbose eq "true") {
        $main::afio_verb_flag = "-v";
        $main::dump_verb_flag = "-v";
        $main::tar_verb_flag = "--verbose";
        $main::zip_verb_flag = "-v";
    } else {
        $main::afio_verb_flag = "";
        $main::dump_verb_flag = "";
        $main::tar_verb_flag = "";
        $main::cpio_verb_flag = "--dot";
        $main::zip_verb_flag = "-q";
    }

    # Sparse flag
    if ($cfg::sparse eq "true") {
        $main::afio_sparse_flag = "";
        $main::tar_sparse_flag = "--sparse";
        $main::cpio_sparse_flag = "--sparse";
    } else {
        $main::afio_sparse_flag = "-j";
        $main::tar_sparse_flag = "";
        $main::cpio_sparse_flag = "";
    }

    # Type-specific setup
    if ($cfg::type eq 'afio') {

        &checkinpath('afio');
        &checkinpath('printf');

        # Compress flag for afio must be handled differently
        if ($cfg::compress =~ m/^(gzip|bzip2|compress)$/) {

            if ($cfg::compress eq "gzip") {
                $main::afio_z_flag = "-P $cfg::compress -Q -$cfg::compr_level -Z";
                $main::afio_unz_flag = "-P $cfg::compress -Q -d -Q -q -Z";

            } elsif ($cfg::compress eq "bzip2") {
                $main::afio_z_flag = "-P $cfg::compress -Q -$cfg::compr_level -Z";
                $main::afio_unz_flag = "-P $cfg::compress -Q -d -Z";

            } elsif ($cfg::compress eq "compress") {
                $main::afio_z_flag = "-P $cfg::compress -Q -c -Z";
                $main::afio_unz_flag = "-P $cfg::compress -Q -d -Q -c -Z";

            }
            $main::unz = ""; # Reset & just use this for reading the archive file.

            # Compression cache size
            if ($cfg::afio_compress_cache_size !~ m/^\d+$/) {
                push(@main::errors,"\$afio_compress_cache_size must be set to an integer");
            } else {
                if ($cfg::afio_compress_cache_size != 0) {
                    $main::afio_z_flag .= " -M " . $cfg::afio_compress_cache_size . "m";
                }
            }

            # Compression threshold
            if ($cfg::afio_compress_threshold !~ m/^\d+$/) {
                push(@main::errors,"\$afio_compress_threshold must be set to an integer");
            } else {
                if ($cfg::afio_compress_threshold != 0) {
                    $main::afio_z_flag .= " -T " . $cfg::afio_compress_threshold . "k";
                }
            }

        } else {
            $main::afio_z_flag = "";
            $main::afio_unz_flag = "";
        }

        # Echo block number
        $main::afio_bnum_flag = "";
        if ($cfg::verbose eq "true") {
            if ($cfg::afio_echo_block eq "true") {
                $main::afio_bnum_flag = "-B";
            }
        }

    } elsif ($cfg::type eq 'dump') {

        &checkinpath('dump');
        &checkinpath('restore');

        # Length of tape
        if ($cfg::dump_length !~ m/^\d+$/) {
            push(@main::errors,"\$dump_length must be set to integer number of kilobytes");
        }

        # If length set to 0 will will try autosize
        if ($cfg::dump_length == 0) {
            $main::dump_len_flag = "-a";
        } else {
            $main::dump_len_flag = "-B $cfg::dump_length";
        }

    } elsif ($cfg::type eq 'tar') {

        &checkinpath('tar');
        &checkinpath('sed');

        # Echo record number
        $main::tar_recnum_flag = "";
        if ($cfg::verbose eq "true") {
            if ($cfg::tar_echo_record_num eq "true") {
                $main::tar_recnum_flag = "-R";
            }
        }

        # Set atime preserve
        if ($cfg::tar_atime_preserve eq "true") {
            $main::tar_atime_flag = "--atime-preserve";
        } else {
            $main::tar_atime_flag = "";
        }

    } elsif ($cfg::type eq 'cpio') {

        &checkinpath('cpio');

    } elsif ($cfg::type eq 'zip') {

        &checkinpath('zip');
        &checkinpath('unzip');
        &checkinpath('sed');

        $main::zip_compr_flag = "-$cfg::compr_level";

       if ($cfg::compress =~ /^(gzip|bzip2|compress)$/) {
            warn("Using type \"zip\" with compress=$cfg::compress makes no sense");
            warn("Setting compression to false");
	    $main::unz = "";
	    $main::z = "";
	    $cfg::compress = "false";
        }

        $main::zip_noz_flag = "";
        if ($cfg::nocompress_types ne "") {
            # Add dots to file extensions, make -n flag
            @_ =  split(" ",$cfg::nocompress_types);
            foreach (@_) {
                $_ = "." . $_;
            }
            $main::zip_noz_flag = " -n " . join(":",@_);
        }

    }

    # Paths: tmp, log/stamp files
    &checkinpath($cfg::comp_log) if ($cfg::comp_log ne "false");

    $cfg::tmpdir = &nuke_trailing_slash($cfg::tmpdir);
    $cfg::logdir = &nuke_trailing_slash($cfg::logdir);
    $cfg::stampdir = &nuke_trailing_slash($cfg::stampdir);

    if ($cfg::tmpdir !~ m:^/:) {
        push(@main::errors,"\$tmpdir must be absolute path: $cfg::tmpdir");
    }
    if ($cfg::logdir !~ m:^/:) {
        push(@main::errors,"\$logdir must be absolute path: $cfg::logdir");
    }
    if ($cfg::stampdir !~ m:^/:) {
        push(@main::errors,"\$stampdir must be absolute path: $cfg::stampdir");
    }
    if (! -d $cfg::tmpdir) {
        push(@main::errors,"\$tmpdir $cfg::tmpdir is not a directory");
    }
    if (! -d $cfg::logdir) {
        mkdir("$cfg::logdir",0755) or push(@main::errors,"Can't mkdir $cfg::logdir: $OS_ERROR");
    }
    if (! -w $cfg::logdir) {
        push(@main::errors,"Can't write to $cfg::logdir: $OS_ERROR");
    }
    if (! -d $cfg::stampdir) {
        mkdir("$cfg::stampdir",0755) or push(@main::errors,"Can't mkdir $cfg::stampdir: $OS_ERROR");
    }
    if (! -w $cfg::stampdir) {
        push(@main::errors,"Can't write to $cfg::stampdir: $OS_ERROR");
    }

    # Levels
    if (defined($main::opt{'level'})) {
        if ($main::opt{'level'} !~ m/^\d$/) {
            push(@main::errors,"-level must be 0 through 9 only");
        }
    }

    # Mode
    my (@modelist) = qw(fs list extract compare restore toc);
    my @modes;
    my $modecount = 0;
    foreach (@modelist) {
        if (defined($main::opt{$_})) {
            $modecount++;
            push(@modes,$_);
        }
    }
    if ($modecount > 1) {
        $_ = join(" -",@modes);
        push(@main::errors,"Can't specify more than one mode (given \"-$_\")");
    }
    if ($modecount == 0) {
        push(@main::errors,"Nothing to do (see -help)");
    }

    # Test
    if (defined($main::opt{'n'})) {
        &log('(debug) no backup or mt commands will be executed');
    }

    # Check extract list
    if (defined($main::opt{'files'})) {
        if (defined($main::opt{'extract'})) {
            if (! -r $main::opt{'files'}) {
                push(@main::errors,"list of files $main::opt{files} not readable: $OS_ERROR");
            }
        } else {
            push(@main::errors,"-files can only be used with -extract");
        }
    }

    if (@main::errors) {
        print "\nErrors:\n";
        while(@main::errors) {
            print " " . pop(@main::errors) . "\n";
        }
        exit(1);
    }

}

######################################################################
# Print usage summary from the header
######################################################################
sub usage {

    open(FILE,"$0") or die "Can't open $0: $OS_ERROR";
    while(<FILE>) {
        last if (m/^\#\s+USAGE:/);
    }
    while(<FILE>) {
        last if (m/^\#\#\#\#\#\#\#/);
        s/^\#//;
        print;
    }
    close(FILE);

}

######################################################################
# Return version string from CVS tag
######################################################################
sub versionstring {

    my $ver = ' $Name$ ';
    $ver =~ s/Name//g;
    $ver =~ s/[:\$]//g;
    $ver =~ s/\s+//g;
    $ver =~ s/^v//g;
    $ver =~ s/_/\./g;
    if ($ver eq '') {
        $ver = "devel";
    }
    return($ver . " <edwinh+flexbackup\@computer.org>");

}

######################################################################
# Return current time in ctime format if normal
# in YYYYMMDDHHMM.SS format if on BSD (have to use touch -t)
# just YYYYMMMDD if argument is given
######################################################################
sub current_time {

    my $short = shift(@_);
    my $string;
    my $textdate;
    my $time = time;
    my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime($time);

    $year += 1900;              # year from localtime has 1900 subtracted
    $mon += 1;                  # month from localtime starts at 0

    $string = sprintf("%04d",$year) . sprintf("%02d",$mon) . sprintf("%02d",$mday);

    if (defined($short)) {
        return($string);
    }

    $string .= sprintf("%02d",$hour) . sprintf("%02d",$min) . "." . sprintf("%02d",$sec);

    if ($main::touch_flag eq "-t") {
        return($string);
    } else {
        chomp($_ = ctime($time));
        return($_);
    }

}

######################################################################
# Possibly return a filename to use
# if running list/extract/compare/restore
######################################################################
sub maybe_get_filename {

    my @modes = qw(list extract compare restore);
    my $arg;
    my $file;
    my $ftype;

    # optionscheck already guarantees only one is set
    foreach (@modes) {
        if (defined($main::opt{$_})) {
            $arg = $main::opt{$_};
        }
    }

    # if the flag given but null, and $device was not set to a dir, just return
    if (($arg eq '') and (!defined($main::use_file))) {
        return($main::device);
    }

    # Look for file in current dir first (or full path given)
    # Then in $device dir (if conf file set to backup to files)
    if (-f "$arg") {
        $file = $arg;
        $main::use_file = 1;

    } elsif (defined($main::use_file) and (-f "$cfg::device/$arg")) {
        $file = $cfg::device . "/" . $arg;

    } else {
        if (defined($main::use_file)) {
            die("Error: file \"$arg\" or \"$cfg::device/$arg\" not found");
        } else {
            die("Error: file \"$arg\" not found");
        }
    }

    # Try and guess file types and commpression scheme
    # might as well since we are reading from a file in this case
    if ($file =~ m/\.(dump|cpio|tar)\.(gz|bz2|Z)$/) {
        $cfg::type = $1;
        $cfg::compress = $2;
        $cfg::compress =~ s/gz/gzip/;
        $cfg::compress =~ s/bz2/bzip2/;
        $cfg::compress =~ s/Z/compress/;
        &line();
        &log("| Auto-set to type=$cfg::type compress=$cfg::compress");
        &optioncheck(); # redo to set a few variables over

    } elsif ($file =~ m/\.afio-(gz|bz2|Z)$/) {
        $cfg::type = "afio";
        $cfg::compress = $1;
        $cfg::compress =~ s/gz/gzip/;
        $cfg::compress =~ s/bz2/bzip2/;
        $cfg::compress =~ s/Z/compress/;
        &line();
        &log("| Auto-set to type=$cfg::type compress=$cfg::compress");
        &optioncheck(); # redo to set a few variables over

    } elsif ($file =~ m/\.(afio|dump|cpio|tar|zip)$/) {
        $cfg::type = $1;
        $cfg::compress = "false";
        &line();
        &log("| Auto-set to type=$cfg::type compress=$cfg::compress");
        &optioncheck(); # redo to set a few variables over

    } elsif ($file =~ m/\.tgz$/) {
        $cfg::type = "tar";
        $cfg::compress = "gzip";
        &line();
        &log("| Auto-set to type=$cfg::type compress=$cfg::compress");
        &optioncheck(); # redo to set a few variables over

    } elsif ($file =~ m/\.taz$/) {
        $cfg::type = "tar";
        $cfg::compress = "compress";
        &line();
        &log("| Auto-set to type=$cfg::type compress=$cfg::compress");
        &optioncheck(); # redo to set a few variables over

    } elsif ($file =~ m/\.rpm$/) {
        $cfg::type = "cpio";
        $cfg::compress = "false";
        &line();
        &log("| Auto-set to type=$cfg::type compress=$cfg::compress");

    }

    return($file);

}

######################################################################
# Update table of contents
######################################################################
sub update_toc {

    # Only ftape has the toc capability
    if ($cfg::ftape eq 'true') {
        &log('| Updating table of contents...');
        foreach (keys %main::title) {
            &tag($_,$main::title{$_});
        }
    }
}

######################################################################
# Check validity of a config option
######################################################################
sub check {

    my $ref = shift(@_);
    my $varname = shift(@_);
    my $ok = shift(@_);         # list of ok values, or empty for t/f, or "exists"
    my @ok;
    my $found = 0;
    my $realvarname;

    if (!defined($ok)) {
        @ok = ('true','false');
    } else {
        @ok = split(" ",$ok);
    }

    if (!defined($$ref)) {
        push(@main::errors,"\$$varname not defined");
    } else {
        if ($ok[0] ne "exist") {
            foreach (@ok) {
                if ($_ eq $$ref) {
                    $found = 1;
                }
            }
            if ($found == 0 ) {
                $_ = join(", ",@ok);
                push(@main::errors,"\$$varname must be one of $_");
            }
        }
    }

}

######################################################################
# Check to see if a program is found in $PATH
######################################################################
sub checkinpath {
    my ($file) = @_;
    my ($dir, @path);

    @path = split(/:/,$ENV{'PATH'});

    foreach $dir (@path) {
        if (-e "${dir}/$file" && -x _) {
            return "${dir}/$file";
        }
    }
    push(@main::errors,"$file not found in \$PATH");
    return(0);

}

######################################################################
# Run  a command, or echo it depending on the -n flag
# Then show tape drive position
######################################################################
sub run_or_echo_then_query {

    my $cmd = shift(@_);

    if (!defined($main::opt{'n'})) {
        system($cmd);
    } else {
        &log("$cmd");
    }

    &line();
    &mt('generic-query');
    &line();

}

######################################################################
# Return a command possibly wrapped in ssh/rsh, or else just ()
######################################################################
sub maybe_remote_cmd {

    my $cmd = shift(@_);
    my $quote = shift(@_);

    if (!defined($quote)) {
        $quote = "'";
    }

    if ($main::remote) {
	$cmd  = "$cfg::remoteshell $main::remote " . $quote . $cmd . $quote;
    } else {
	$cmd  = "($cmd)";
    }
    return($cmd);

}

######################################################################
# Stuff to do before list/restore/extract/compare
# return command to get archive on stdout
######################################################################
sub setup_before_read {

    $main::device = &maybe_get_filename();
    my $cmd;

    &mt("generic-blksize $main::mt_blksize");
    if (defined($main::opt{'reten'})) {
        &mt("retension");
    }

    &line();
    &mt('generic-query');
    &line();

    $cmd .= $main::read_cmd . $main::device . " | ";
    $cmd .= "$main::unz ";

    if ($main::device =~ m/\.rpm$/) {
        $cmd .= "rpm2cpio | ";
    }

    $cmd =~ s/\s+/ /g;

    return($cmd);

}


######################################################################
# Get rid of trailing slash on path or host:/path specs
######################################################################
sub nuke_trailing_slash {

    my $spec = shift(@_);
    my $host;
    my $path;

    if ($spec =~ m/(\S+:)(\S+)/) {
        $host = $1;
        $path = $2;
    } else {
        $host = '';
        $path = $spec;
    }

    if ($path ne "/") {
        $path =~ s%/$%%;
    }

    return($host . $path);

}

######################################################################
# Print the volume label from an afio control file
######################################################################
sub print_afio_volume_header {
    # for now just echo our stdin
    while(<STDIN>) {
        print;
    }
}
